services:
  grafana:
    image: grafana/grafana:10.2.2
    volumes:
      - ./configuration/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor traceQLStreaming metricsSummary
    ports:
      - 127.0.0.1:4321:3000
    profiles:
      - production

  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./configuration/tempo.yaml:/etc/tempo.yaml
    profiles:
      - production

  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./configuration/prometheus.yaml:/etc/prometheus.yaml
    profiles:
      - production

  database:
    image: postgis/postgis:16-3.4
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 127.0.0.1:5432:5432

  migration:
    build:
      context: ./migration
      dockerfile: Dockerfile
    depends_on:
      database:
        condition: service_healthy
    environment:
      - SQITCH_TARGET=db:pg://${POSTGRES_USER}@database/${POSTGRES_USER}
      - SQITCH_PASSWORD=${POSTGRES_PASSWORD}

  fetcher:
    build:
      context: ./backend
      dockerfile: ./cmd/fetcher/Dockerfile
    depends_on:
      migration:
        condition: service_completed_successfully
    environment:
      DATABASE_USERNAME: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_ADDRESS: database
      DATABASE_NAME: ${POSTGRES_USER}
      TELEMETRY_ENABLED: ${TELEMETRY_ENABLED}
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4318
    restart: always

  api:
    build:
      context: ./backend
      dockerfile: ./cmd/api/Dockerfile
    depends_on:
      migration:
        condition: service_completed_successfully
    environment:
      PORT: 8080
      APP_DOMAIN_NAME: ${APP_DOMAIN_NAME}
      DATABASE_USERNAME: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_ADDRESS: database
      DATABASE_NAME: ${POSTGRES_USER}
      TELEMETRY_ENABLED: ${TELEMETRY_ENABLED}
      OTEL_EXPORTER_OTLP_ENDPOINT: http://tempo:4318
    restart: always
    ports:
      - 127.0.0.1:8080:8080

  webapp:
    build:
      context: ./webapp
      args:
        API_URL: ${API_URL}
        MAPBOX_ACCESS_TOKEN: ${MAPBOX_ACCESS_TOKEN}
        MAP_STYLE: ${MAP_STYLE}
    depends_on:
      - api

    ports:
      - 127.0.0.1:3000:80
    profiles:
      - production